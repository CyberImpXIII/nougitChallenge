module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAuthor {
  count: Int!
}

type AggregateEntry {
  count: Int!
}

type Author {
  id: ID!
  name: String!
  picture: String!
  score: Float!
}

type AuthorConnection {
  pageInfo: PageInfo!
  edges: [AuthorEdge]!
  aggregate: AggregateAuthor!
}

input AuthorCreateInput {
  id: ID
  name: String!
  picture: String!
  score: Float!
}

input AuthorCreateOneInput {
  create: AuthorCreateInput
  connect: AuthorWhereUniqueInput
}

type AuthorEdge {
  node: Author!
  cursor: String!
}

enum AuthorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  score_ASC
  score_DESC
}

type AuthorPreviousValues {
  id: ID!
  name: String!
  picture: String!
  score: Float!
}

type AuthorSubscriptionPayload {
  mutation: MutationType!
  node: Author
  updatedFields: [String!]
  previousValues: AuthorPreviousValues
}

input AuthorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AuthorWhereInput
  AND: [AuthorSubscriptionWhereInput!]
  OR: [AuthorSubscriptionWhereInput!]
  NOT: [AuthorSubscriptionWhereInput!]
}

input AuthorUpdateDataInput {
  name: String
  picture: String
  score: Float
}

input AuthorUpdateInput {
  name: String
  picture: String
  score: Float
}

input AuthorUpdateManyMutationInput {
  name: String
  picture: String
  score: Float
}

input AuthorUpdateOneRequiredInput {
  create: AuthorCreateInput
  update: AuthorUpdateDataInput
  upsert: AuthorUpsertNestedInput
  connect: AuthorWhereUniqueInput
}

input AuthorUpsertNestedInput {
  update: AuthorUpdateDataInput!
  create: AuthorCreateInput!
}

input AuthorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  score: Float
  score_not: Float
  score_in: [Float!]
  score_not_in: [Float!]
  score_lt: Float
  score_lte: Float
  score_gt: Float
  score_gte: Float
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
}

input AuthorWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Entry {
  id: ID!
  createdAt: DateTime!
  author: Author!
  date: String!
  popularity: Float!
  isTrending: Boolean!
  title: String!
  description: String!
  numComments: Int!
  thumbnail: String!
  codeSubmissionTotal: Int!
  pledgeTotal: Float!
  pledgeGoal: Float!
  pledgerCount: Int!
  status: Int!
}

type EntryConnection {
  pageInfo: PageInfo!
  edges: [EntryEdge]!
  aggregate: AggregateEntry!
}

input EntryCreateInput {
  id: ID
  author: AuthorCreateOneInput!
  date: String!
  popularity: Float!
  isTrending: Boolean!
  title: String!
  description: String!
  numComments: Int!
  thumbnail: String!
  codeSubmissionTotal: Int!
  pledgeTotal: Float!
  pledgeGoal: Float!
  pledgerCount: Int!
  status: Int!
}

type EntryEdge {
  node: Entry!
  cursor: String!
}

enum EntryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  popularity_ASC
  popularity_DESC
  isTrending_ASC
  isTrending_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  numComments_ASC
  numComments_DESC
  thumbnail_ASC
  thumbnail_DESC
  codeSubmissionTotal_ASC
  codeSubmissionTotal_DESC
  pledgeTotal_ASC
  pledgeTotal_DESC
  pledgeGoal_ASC
  pledgeGoal_DESC
  pledgerCount_ASC
  pledgerCount_DESC
  status_ASC
  status_DESC
}

type EntryPreviousValues {
  id: ID!
  createdAt: DateTime!
  date: String!
  popularity: Float!
  isTrending: Boolean!
  title: String!
  description: String!
  numComments: Int!
  thumbnail: String!
  codeSubmissionTotal: Int!
  pledgeTotal: Float!
  pledgeGoal: Float!
  pledgerCount: Int!
  status: Int!
}

type EntrySubscriptionPayload {
  mutation: MutationType!
  node: Entry
  updatedFields: [String!]
  previousValues: EntryPreviousValues
}

input EntrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EntryWhereInput
  AND: [EntrySubscriptionWhereInput!]
  OR: [EntrySubscriptionWhereInput!]
  NOT: [EntrySubscriptionWhereInput!]
}

input EntryUpdateInput {
  author: AuthorUpdateOneRequiredInput
  date: String
  popularity: Float
  isTrending: Boolean
  title: String
  description: String
  numComments: Int
  thumbnail: String
  codeSubmissionTotal: Int
  pledgeTotal: Float
  pledgeGoal: Float
  pledgerCount: Int
  status: Int
}

input EntryUpdateManyMutationInput {
  date: String
  popularity: Float
  isTrending: Boolean
  title: String
  description: String
  numComments: Int
  thumbnail: String
  codeSubmissionTotal: Int
  pledgeTotal: Float
  pledgeGoal: Float
  pledgerCount: Int
  status: Int
}

input EntryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  author: AuthorWhereInput
  date: String
  date_not: String
  date_in: [String!]
  date_not_in: [String!]
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_contains: String
  date_not_contains: String
  date_starts_with: String
  date_not_starts_with: String
  date_ends_with: String
  date_not_ends_with: String
  popularity: Float
  popularity_not: Float
  popularity_in: [Float!]
  popularity_not_in: [Float!]
  popularity_lt: Float
  popularity_lte: Float
  popularity_gt: Float
  popularity_gte: Float
  isTrending: Boolean
  isTrending_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  numComments: Int
  numComments_not: Int
  numComments_in: [Int!]
  numComments_not_in: [Int!]
  numComments_lt: Int
  numComments_lte: Int
  numComments_gt: Int
  numComments_gte: Int
  thumbnail: String
  thumbnail_not: String
  thumbnail_in: [String!]
  thumbnail_not_in: [String!]
  thumbnail_lt: String
  thumbnail_lte: String
  thumbnail_gt: String
  thumbnail_gte: String
  thumbnail_contains: String
  thumbnail_not_contains: String
  thumbnail_starts_with: String
  thumbnail_not_starts_with: String
  thumbnail_ends_with: String
  thumbnail_not_ends_with: String
  codeSubmissionTotal: Int
  codeSubmissionTotal_not: Int
  codeSubmissionTotal_in: [Int!]
  codeSubmissionTotal_not_in: [Int!]
  codeSubmissionTotal_lt: Int
  codeSubmissionTotal_lte: Int
  codeSubmissionTotal_gt: Int
  codeSubmissionTotal_gte: Int
  pledgeTotal: Float
  pledgeTotal_not: Float
  pledgeTotal_in: [Float!]
  pledgeTotal_not_in: [Float!]
  pledgeTotal_lt: Float
  pledgeTotal_lte: Float
  pledgeTotal_gt: Float
  pledgeTotal_gte: Float
  pledgeGoal: Float
  pledgeGoal_not: Float
  pledgeGoal_in: [Float!]
  pledgeGoal_not_in: [Float!]
  pledgeGoal_lt: Float
  pledgeGoal_lte: Float
  pledgeGoal_gt: Float
  pledgeGoal_gte: Float
  pledgerCount: Int
  pledgerCount_not: Int
  pledgerCount_in: [Int!]
  pledgerCount_not_in: [Int!]
  pledgerCount_lt: Int
  pledgerCount_lte: Int
  pledgerCount_gt: Int
  pledgerCount_gte: Int
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  AND: [EntryWhereInput!]
  OR: [EntryWhereInput!]
  NOT: [EntryWhereInput!]
}

input EntryWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAuthor(data: AuthorCreateInput!): Author!
  updateAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author
  updateManyAuthors(data: AuthorUpdateManyMutationInput!, where: AuthorWhereInput): BatchPayload!
  upsertAuthor(where: AuthorWhereUniqueInput!, create: AuthorCreateInput!, update: AuthorUpdateInput!): Author!
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteManyAuthors(where: AuthorWhereInput): BatchPayload!
  createEntry(data: EntryCreateInput!): Entry!
  updateEntry(data: EntryUpdateInput!, where: EntryWhereUniqueInput!): Entry
  updateManyEntries(data: EntryUpdateManyMutationInput!, where: EntryWhereInput): BatchPayload!
  upsertEntry(where: EntryWhereUniqueInput!, create: EntryCreateInput!, update: EntryUpdateInput!): Entry!
  deleteEntry(where: EntryWhereUniqueInput!): Entry
  deleteManyEntries(where: EntryWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  author(where: AuthorWhereUniqueInput!): Author
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author]!
  authorsConnection(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthorConnection!
  entry(where: EntryWhereUniqueInput!): Entry
  entries(where: EntryWhereInput, orderBy: EntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entry]!
  entriesConnection(where: EntryWhereInput, orderBy: EntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntryConnection!
  node(id: ID!): Node
}

type Subscription {
  author(where: AuthorSubscriptionWhereInput): AuthorSubscriptionPayload
  entry(where: EntrySubscriptionWhereInput): EntrySubscriptionPayload
}
`
      }
    